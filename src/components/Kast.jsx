/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 public/models/kast.gltf
*/
import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { useConfigurator } from "../contexts/Configurator";
import { useFrame } from "@react-three/fiber";

export function Kast(props) {
  const { nodes, materials } = useGLTF("/models/kast.gltf");

  const { closetWidth } = useConfigurator();

  const bottomWidth = useRef();
  const topWidth = useRef();
  const leftSide = useRef();
  const rightSide = useRef();

  useFrame((_state, delta) => {
    const closetWidthScale = closetWidth / 60;
    const targetScale = new THREE.Vector3(1, 1, closetWidthScale);
    bottomWidth.current.scale.lerp(targetScale, delta * 12);
    topWidth.current.scale.lerp(targetScale, delta * 12);

    const leftSidePosition = new THREE.Vector3(0, 0, 0 * closetWidthScale);
    leftSide.current.position.lerp(leftSidePosition, delta * 12);
  });
  return (
    <group {...props} dispose={null} rotation={[0, Math.PI * 1.5, 0]}>
      <mesh
        geometry={nodes.onder.geometry}
        material={materials.groen}
        ref={bottomWidth}
      />
      <mesh
        geometry={nodes.boven.geometry}
        material={materials.groen}
        ref={topWidth}
      />

      <mesh
        geometry={nodes.links.geometry}
        material={materials.blauw}
        ref={leftSide}
      />
      <mesh
        geometry={nodes.rechts.geometry}
        material={materials.blauw}
        ref={rightSide}
      />

      <mesh geometry={nodes.achter.geometry} material={materials.rood} />
    </group>
  );
}

useGLTF.preload("/models/kast.gltf");

export default Kast;
